#!/bin/bash

# IMAGE_NAME
# IMAGE_TAG
# DEPLOYMENT_NAME
# DEPLOYMENT_ENV


# Check - deployment name exists in path
if [ ! -d deployments/"$DEPLOYMENT_NAME" ]; then
  echo -e "# Error: Deployment deployments/$DEPLOYMENT_NAME does not exist.\n"
  exit 1
fi


KUSTOMIZATION=()

# 'production is catch-all for all production environments. List them here'
if [ "$DEPLOYMENT_ENV" == 'production' ];then
    KUSTOMIZATION+=("$(find deployments/"$DEPLOYMENT_NAME"/deployment_id/prod-a -name kustomization.yaml)")
    KUSTOMIZATION+=("$(find deployments/"$DEPLOYMENT_NAME"/deployment_id/prod-b -name kustomization.yaml)")
else
    # Check - environment (deployment_id) exists in path
    if [ ! -d deployments/"$DEPLOYMENT_NAME"/deployment_id/"$DEPLOYMENT_ENV" ]; then
        echo -e "# Error: Environment deployments/$DEPLOYMENT_NAME/deployment_id/$DEPLOYMENT_ENV does not exist.\n"
        exit 1
    fi
    KUSTOMIZATION+=($(find deployments/$DEPLOYMENT_NAME/deployment_id/$DEPLOYMENT_ENV -name kustomization.yaml))
fi

# requires KUSTOMIZATION_FILE
function check_version () {
    for image in $(echo $(yq  '.images | keys' $KUSTOMIZATION_FILE -o c) | sed "s/,/ /g"); do
        # call
        IMAGE_FOUND=$(cat $KUSTOMIZATION_FILE | yq ".images.$image |  select(.. == \"$IMAGE_NAME\")")
        if [[ "${IMAGE_FOUND}" ]]; then
            IMAGE_TAG_CURRENT=$(yq ".images.0.newTag" $KUSTOMIZATION_FILE)
            # echo $IMAGE_TAG_CURRENT
        fi
    done
}

function update_version () {
    for image in $(echo $(yq  '.images | keys' $KUSTOMIZATION_FILE -o c) | sed "s/,/ /g"); do
        # call
        IMAGE_FOUND=$(cat "$KUSTOMIZATION_FILE" | yq ".images.$image |  select(.. == \"$IMAGE_NAME\")")
        if [[ "${IMAGE_FOUND}" ]]; then
            echo "# Patching $KUSTOMIZATION_FILE"
            yq e -i ".images.$image.newTag = \"$IMAGE_TAG\"" "$KUSTOMIZATION_FILE"

            echo -e '# Done.\n'
        fi
    done
}

if [ "$1" == 'check' ];then
    for KUSTOMIZATION_FILE in "${KUSTOMIZATION[@]}";do
        check_version
    done
    echo "CURRENT_VERSION=$IMAGE_NAME:$IMAGE_TAG_CURRENT"
    exit 0
fi

if [ "$1" == 'update' ];then

    for KUSTOMIZATION_FILE in "${KUSTOMIZATION[@]}";do
        check_version
    done

    echo -e "# Preparing to update deployments/$DEPLOYMENT_NAME in $DEPLOYMENT_ENV"
    echo -e "# Bump image $IMAGE_NAME to version === $IMAGE_TAG ===\n"
    echo -e "# Files to update:"
    printf "# - %s\n" "${KUSTOMIZATION[@]}"
    echo ""

    for KUSTOMIZATION_FILE in "${KUSTOMIZATION[@]}";do
        if [ "$IMAGE_TAG" == "$IMAGE_TAG_CURRENT" ]; then
            echo "# Image tag $IMAGE_TAG matches deployment $IMAGE_NAME:$IMAGE_TAG_CURRENT"
            exit 0
        fi
        echo -e "# Image $IMAGE_NAME\n# +++  $IMAGE_NAME:$IMAGE_TAG\n# ---  $IMAGE_NAME:$IMAGE_TAG_CURRENT\n#"
        update_version
    done
    exit 0
fi















## patch the fist image - busybox-api
##  yq-m e -i '.images.0.newTag = "3.7"' kustomization.yaml
##
## Find the key holding the image name using select
##
##   yq '.images.[] | select(.. == "registry.hub.docker.com/library/busybox")' kustomization.yaml

# for i in $(echo $(yq  '.images | keys' kustomization.yaml -o c) | sed "s/,/ /g")
# do
#     # call your procedure/other scripts here below
#     echo "$i" && cat kustomization.yaml | yq ".images.$i |  select(.. == \"registry.hub.docker.com/library/busybox\")"
# done


# IMAGE=registry.hub.docker.com/library/redis
# for i in $(echo $(yq  '.images | keys' kustomization.yaml -o c) | sed "s/,/ /g")
# do
#     # call your procedure/other scripts here below
#     echo "$i" && cat kustomization.yaml | yq ".images.$i |  select(.. == \"$IMAGE\")"
# done
